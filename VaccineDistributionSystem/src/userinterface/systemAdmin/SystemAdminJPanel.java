/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.systemAdmin;

import business.Business;
import business.enterprise.CDCEnterprise;
import business.enterprise.DPHEnterprise;
import business.enterprise.DistributorEnterprise;
import business.enterprise.Enterprise;
import business.enterprise.MedicalEnterprise;
import business.network.Network;
import business.organization.useraccount.UserAccount;
import business.utility.Validation;
import business.vaccineEcoSystem.VaccineEcoSystem;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Harshil
 */
public class SystemAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SystemAdminJPanel
     */
    
    private JPanel userProcessContainer;
    private VaccineEcoSystem vaccineEcoSystem;
    private UserAccount userAccount;
    private Business business;
    
    public SystemAdminJPanel(JPanel userProcessContainer,UserAccount userAccount,Business business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        vaccineEcoSystem = business.getVaccineEcoSystem();
        this.business = business;
        
        populateTree();
        
    }
    
    
    public void populateTree()
    {
        hidePanels();
        DefaultTreeModel model=(DefaultTreeModel)jTreeEcoSystem.getModel();
        
        DefaultMutableTreeNode root=(DefaultMutableTreeNode)model.getRoot();
        root.removeAllChildren();
        DefaultMutableTreeNode countryNetworkNode;
        DefaultMutableTreeNode stateNetworkNode;
        DefaultMutableTreeNode cityNetworkNode;
        DefaultMutableTreeNode networkNode;
        DefaultMutableTreeNode enterpriseNode;
        
        Network rootNetwork= vaccineEcoSystem.getRootNetwork();
        
        for(int i=0;i<rootNetwork.getSubNetworkDirectory().getNetworkList().size();i++)
        {
            Network country=rootNetwork.getSubNetworkDirectory().getNetworkList().get(i);
            countryNetworkNode=new DefaultMutableTreeNode(country.getNetworkName());
            System.out.println(countryNetworkNode.getClass());
            root.insert(countryNetworkNode, i);
           
            for(int j=0;j<country.getSubNetworkDirectory().getNetworkList().size();j++)
            {
                Network state=country.getSubNetworkDirectory().getNetworkList().get(j);
                stateNetworkNode=new DefaultMutableTreeNode(state.getNetworkName());
                countryNetworkNode.insert(stateNetworkNode, j);
                for(int k=0;k<state.getSubNetworkDirectory().getNetworkList().size();k++)
                {
                    Network city=state.getSubNetworkDirectory().getNetworkList().get(k);
                    cityNetworkNode=new DefaultMutableTreeNode(city.getNetworkName());
                    stateNetworkNode.insert(cityNetworkNode, k);
                }
            }
        }
      
        model.reload();
    
    }
    
    private void hidePanels()
    {
        jLPConfigureEnterprise.setVisible(false);
        jLPGrowNetwork.setVisible(false);        
        jLPAddEnterprise.setVisible(false);
        jLPAddDistributorEnterprise.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSystemAmdinistrator = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeEcoSystem = new javax.swing.JTree();
        jLPAddEnterprise = new javax.swing.JLayeredPane();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        txtEnterpriseName = new javax.swing.JTextField();
        btnAddEnterprise = new javax.swing.JButton();
        lblAddEnterprise = new javax.swing.JLabel();
        jLPConfigureEnterprise = new javax.swing.JLayeredPane();
        lblConfigureEnterprises = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        btnSelectAndConfigure = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEnterprises = new javax.swing.JTable();
        jLPGrowNetwork = new javax.swing.JLayeredPane();
        lblAdd = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNetworkName = new javax.swing.JTextField();
        btnAddNetwork = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLPAddDistributorEnterprise = new javax.swing.JLayeredPane();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        lblAddDistributorEnterprise = new javax.swing.JLabel();
        txtDistributorEnterpriseName = new javax.swing.JTextField();
        btnAddDistributor = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSystemAmdinistrator.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblSystemAmdinistrator.setText("System Administrator");
        add(lblSystemAmdinistrator, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Our Network");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 70, -1, -1));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Globe");
        jTreeEcoSystem.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeEcoSystem.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeEcoSystemValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeEcoSystem);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 240, 590));

        jLPAddEnterprise.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLPAddEnterprise.add(jSeparator1);
        jSeparator1.setBounds(10, 60, 350, 0);
        jLPAddEnterprise.add(jSeparator2);
        jSeparator2.setBounds(10, 40, 350, 20);

        txtEnterpriseName.setPreferredSize(new java.awt.Dimension(200, 30));
        txtEnterpriseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEnterpriseNameActionPerformed(evt);
            }
        });
        jLPAddEnterprise.add(txtEnterpriseName);
        txtEnterpriseName.setBounds(80, 70, 200, 30);

        btnAddEnterprise.setBackground(new java.awt.Color(102, 102, 255));
        btnAddEnterprise.setText("Add Enterprise");
        btnAddEnterprise.setPreferredSize(new java.awt.Dimension(300, 25));
        btnAddEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEnterpriseActionPerformed(evt);
            }
        });
        jLPAddEnterprise.add(btnAddEnterprise);
        btnAddEnterprise.setBounds(40, 110, 280, 25);

        lblAddEnterprise.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAddEnterprise.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddEnterprise.setText("Add Enterprise");
        jLPAddEnterprise.add(lblAddEnterprise);
        lblAddEnterprise.setBounds(10, 10, 350, 30);

        add(jLPAddEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 370, 170));

        jLPConfigureEnterprise.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblConfigureEnterprises.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblConfigureEnterprises.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConfigureEnterprises.setText("Configure Enterprise");
        jLPConfigureEnterprise.add(lblConfigureEnterprises);
        lblConfigureEnterprises.setBounds(30, 10, 420, 30);
        jLPConfigureEnterprise.add(jSeparator4);
        jSeparator4.setBounds(50, 40, 390, 20);

        btnSelectAndConfigure.setBackground(new java.awt.Color(102, 102, 255));
        btnSelectAndConfigure.setText("Select & Configure");
        btnSelectAndConfigure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAndConfigureActionPerformed(evt);
            }
        });
        jLPConfigureEnterprise.add(btnSelectAndConfigure);
        btnSelectAndConfigure.setBounds(50, 160, 380, 23);

        tblEnterprises.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Enterprise"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEnterprises.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblEnterprisesPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(tblEnterprises);

        jLPConfigureEnterprise.add(jScrollPane3);
        jScrollPane3.setBounds(50, 50, 380, 100);

        add(jLPConfigureEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 300, 520, 190));

        jLPGrowNetwork.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblAdd.setText("Add");
        jLPGrowNetwork.add(lblAdd);
        lblAdd.setBounds(50, 60, 380, 14);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Grow The Network");
        jLPGrowNetwork.add(jLabel3);
        jLabel3.setBounds(50, 10, 390, 30);

        txtNetworkName.setPreferredSize(new java.awt.Dimension(200, 30));
        jLPGrowNetwork.add(txtNetworkName);
        txtNetworkName.setBounds(50, 80, 390, 30);

        btnAddNetwork.setBackground(new java.awt.Color(102, 102, 255));
        btnAddNetwork.setText("Add");
        btnAddNetwork.setPreferredSize(new java.awt.Dimension(300, 25));
        btnAddNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNetworkActionPerformed(evt);
            }
        });
        jLPGrowNetwork.add(btnAddNetwork);
        btnAddNetwork.setBounds(50, 120, 390, 25);
        jLPGrowNetwork.add(jSeparator3);
        jSeparator3.setBounds(50, 40, 390, 10);

        add(jLPGrowNetwork, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 520, 520, 170));

        jLPAddDistributorEnterprise.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jLPAddDistributorEnterprise.add(jSeparator5);
        jSeparator5.setBounds(60, 70, 160, 10);
        jLPAddDistributorEnterprise.add(jSeparator6);
        jSeparator6.setBounds(20, 52, 310, 10);

        lblAddDistributorEnterprise.setText("                             Add Distributor");
        jLPAddDistributorEnterprise.add(lblAddDistributorEnterprise);
        lblAddDistributorEnterprise.setBounds(14, 10, 320, 40);
        jLPAddDistributorEnterprise.add(txtDistributorEnterpriseName);
        txtDistributorEnterpriseName.setBounds(50, 70, 180, 30);

        btnAddDistributor.setBackground(new java.awt.Color(102, 102, 255));
        btnAddDistributor.setText("Add Distributor");
        btnAddDistributor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDistributorActionPerformed(evt);
            }
        });
        jLPAddDistributorEnterprise.add(btnAddDistributor);
        btnAddDistributor.setBounds(30, 120, 220, 23);

        add(jLPAddDistributorEnterprise, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 100, 360, 170));
    }// </editor-fold>//GEN-END:initComponents

    private void jTreeEcoSystemValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeEcoSystemValueChanged
        //        jLPGrowNetwork.setVisible(true);
        //        jLPAddEnterprise.setVisible(true);
        //        jLPConfigureEnterprise.setVisible(true);
        DefaultMutableTreeNode node= (DefaultMutableTreeNode)jTreeEcoSystem.getLastSelectedPathComponent();
        if(node!=null)
        {
            jLPGrowNetwork.setVisible(true);
            jLPAddEnterprise.setVisible(true);
            jLPConfigureEnterprise.setVisible(true);
            jLPAddDistributorEnterprise.setVisible(true);
            int level=node.getLevel();
            if(level==0)
            {
                jLPAddDistributorEnterprise.setVisible(false);
                jLPAddEnterprise.setVisible(false);
                jLPConfigureEnterprise.setVisible(false);
                lblAdd.setText("Country:");
                btnAddNetwork.setText("Add the Country to "+node.toString());

                //lblAddEnterprise.setText("Add CDC Enterprise to "+node.toString());
                
                //lblAddDistributorEnterprise.setText("Add Distributor Enterprise to "+node.toString());
                
                //lblConfigureEnterprises.setText("Configure Global CDC Enterprises in "+node.toString());

                Network network = vaccineEcoSystem.getRootNetwork();
                populateJListEnterprises(network);
            }
            else if(level==1)
            {
                lblAdd.setText("State:");
                btnAddNetwork.setText("Add the DPH State Enterprise to "+node.toString());

                lblAddEnterprise.setText("Add Country wide CDC Enterprise to "+node.toString());

                lblAddDistributorEnterprise.setText("Add Country Wide National Distributor to "+node.toString());
                lblConfigureEnterprises.setText("Configure Country wide CDC and National Distributor in "+node.toString());

                Network network = vaccineEcoSystem.getRootNetwork().findCountryNetwork(node.toString());
                populateJListEnterprises(network);
            }
            else if(level==2)
            {
                jLPAddDistributorEnterprise.setVisible(false);
                lblAdd.setText("City");
                btnAddNetwork.setText("Add the City Wide Medical Enterprise to "+node.toString());
                lblAddEnterprise.setText("Add State wide DPH Enterprise to "+node.toString());

                
                lblConfigureEnterprises.setText("Configure State wide DPH Enterprise in "+node.toString());
                Network network = vaccineEcoSystem.getRootNetwork().findStateNetwork(node.getParent().toString(), node.toString());
                populateJListEnterprises(network);
            }
            else if(level==3)
            {
                jLPGrowNetwork.setVisible(false);
                jLPAddDistributorEnterprise.setVisible(false);
                lblAddEnterprise.setText("Add City wide Medical Enterprise to "+node.toString());

                lblConfigureEnterprises.setText("Configure City wide Medical Enterprise to "+node.toString());
                Network network = vaccineEcoSystem.getRootNetwork().findCityNetwork(node.getParent().getParent().toString(), node.getParent().toString(), node.toString());
                populateJListEnterprises(network);
            }
        }

    }//GEN-LAST:event_jTreeEcoSystemValueChanged

    
    private void populateJListEnterprises(Network network)
    { 
        DefaultTableModel model = (DefaultTableModel) tblEnterprises.getModel();
        
        model.setRowCount(0);
        
        for(Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList())
        {
            if(enterprise instanceof CDCEnterprise)
            {
                Object[] row = new Object[2];
                row[0] = enterprise;
                row[1] = enterprise.getOrganizationName();
                model.addRow(row);
            }
            else if(enterprise instanceof DPHEnterprise)
            {
                Object[] row = new Object[2];
                row[0] = enterprise;
                row[1] = enterprise.getOrganizationName();
                model.addRow(row);
            }
            else if(enterprise instanceof MedicalEnterprise)
            {
                Object[] row = new Object[2];
                row[0] = enterprise;
                row[1] = enterprise.getOrganizationName();
                model.addRow(row);
            }
            else if(enterprise instanceof DistributorEnterprise)
            {
                Object[] row = new Object[2];
                row[0] = enterprise;
                row[1] = enterprise.getOrganizationName();
                model.addRow(row);
                
            }
               
        }
    }
    
    
    
    private void txtEnterpriseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEnterpriseNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEnterpriseNameActionPerformed

    private void btnAddEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEnterpriseActionPerformed
        DefaultMutableTreeNode node= (DefaultMutableTreeNode)jTreeEcoSystem.getLastSelectedPathComponent();
        
       // Network rootNetwork;
        Network countryNetwork;
        Network stateNetwork;
        Network cityNetwork;
        if(node!=null)
        {
            if(node.getLevel()==1)
            { 
                countryNetwork = vaccineEcoSystem.getRootNetwork().findCountryNetwork(node.toString());
                
                int i = countryNetwork.getAllCDCEnterprise().getEnterpriseList().size();
                if(i==0)
                {
                    addEnterprise();
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"There is already one CDC present for this Country:","INVALID INPUT",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
            }
            else if(node.getLevel() ==2)
            {
                stateNetwork = vaccineEcoSystem.getRootNetwork().findStateNetwork(node.getParent().toString(),node.toString());
                int j = stateNetwork.getAllDPHEnterprise().getEnterpriseList().size();
                if(j == 0)
                {
                    addEnterprise();
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"There is already one DPH present for this State:","INVALID INPUT",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
            else if(node.getLevel() == 3)
            {
                cityNetwork = vaccineEcoSystem.getRootNetwork().findCityNetwork(node.getParent().getParent().toString(),node.getParent().toString(), node.toString());
                int k = cityNetwork.getAllMedicalEnterprise().getEnterpriseList().size();
                if(k == 0)
                {
                    addEnterprise();
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"There is already one Medical Enterprise present for this City:","INVALID INPUT",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }
        }
        else if(node==null)
        {
            JOptionPane.showMessageDialog(null,"Please select a network to configure" ,"SELECT",JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnAddEnterpriseActionPerformed

    private void btnSelectAndConfigureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAndConfigureActionPerformed

        if(Validation.validateTableSelection(tblEnterprises, 1))
        {
            Enterprise enterprise=(Enterprise)tblEnterprises.getValueAt(tblEnterprises.getSelectedRow(), 0);
            ConfigureEnterpriseJPanel configureEnterprisePanel = new ConfigureEnterpriseJPanel(userProcessContainer,userAccount,enterprise,business);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("Configure Enterprise", configureEnterprisePanel);
            layout.next(userProcessContainer);
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select one row","SORRY", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSelectAndConfigureActionPerformed

    private void tblEnterprisesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblEnterprisesPropertyChange
        if(tblEnterprises.getSelectedRowCount()==1)
        {
            btnSelectAndConfigure.setEnabled(true);
            Enterprise enterprise=(Enterprise)tblEnterprises.getValueAt(tblEnterprises.getSelectedRow(), 0);
        }
    }//GEN-LAST:event_tblEnterprisesPropertyChange

    private void btnAddNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNetworkActionPerformed
        DefaultMutableTreeNode node= (DefaultMutableTreeNode)jTreeEcoSystem.getLastSelectedPathComponent();
        if(node!=null)
        {
            if(Validation.validateTextFieldsForNonEmpty(txtNetworkName))
            {
                if(Validation.validateTextFieldsForString(txtNetworkName))
                {

                    //Globe Selected
                    //Addition of Country
                    if(node.getLevel()==0)
                    {
                        Network network1 = vaccineEcoSystem.getRootNetwork();
                        if(network1 !=null)
                        {
                            if(!network1.getSubNetworkDirectory().isPresent(txtNetworkName.getText().trim()))
                            {
                                vaccineEcoSystem.getRootNetwork().getSubNetworkDirectory().createNetwork(txtNetworkName.getText(),Network.NetworkType.COUNTRY.getValue());
                                JOptionPane.showMessageDialog(null,"The country "+txtNetworkName.getText().toUpperCase()+" is added successfully to the World Network","World -->"+txtNetworkName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Country with same name is already present in this Globe","Invaid Input",JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        
                        }
                    }
                    //Country Selected
                    //Addition of State
                    else if(node.getLevel()==1)
                    {
                        Network countryNetwork = vaccineEcoSystem.getRootNetwork().findCountryNetwork(node.toString());

                        if(countryNetwork!=null)
                        {
                            if(!countryNetwork.getSubNetworkDirectory().isPresent(txtNetworkName.getText().trim()))
                            {
                                countryNetwork.getSubNetworkDirectory().createNetwork(txtNetworkName.getText(), Network.NetworkType.STATE.getValue());
                                JOptionPane.showMessageDialog(null,"The state "+txtNetworkName.getText().toUpperCase()+" is added successfully to the "+node.toString()+" Network",node.toString()+"-->"+txtNetworkName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "State with same name is already present in this country","Invaid Input",JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                    }
                    //State Selected
                    //Addition of City
                    else if(node.getLevel()==2)
                    {
                        Network stateNetwork= vaccineEcoSystem.getRootNetwork().findStateNetwork(node.getParent().toString(), node.toString());
                        if(stateNetwork!=null)
                        {
                            if(!stateNetwork.getSubNetworkDirectory().isPresent(txtNetworkName.getText().trim()))
                            {
                                stateNetwork.getSubNetworkDirectory().createNetwork(txtNetworkName.getText(), Network.NetworkType.City.getValue());
                                JOptionPane.showMessageDialog(null,"The city "+txtNetworkName.getText().toUpperCase()+" is added successfully to the "+node.toString()+" Network",node.toString()+"-->"+txtNetworkName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null,"The city with same name is already present in the state","Invalid Input",JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                    }
                    clearFormFieldsAfterGrowNetwork();

                    populateTree();
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Please enter valid name","Invalid Input",JOptionPane.ERROR_MESSAGE);
                    return;
                }

            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please enter networkName","Input Missing",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAddNetworkActionPerformed

    private void btnAddDistributorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDistributorActionPerformed
        // TODO add your handling code here:
        
        DefaultMutableTreeNode node= (DefaultMutableTreeNode)jTreeEcoSystem.getLastSelectedPathComponent();
        
        Network countryNetwork;
        if(node!=null)
        {
            if(node.getLevel()==1)
            { 
                
                
             //rootNetwork =business.getVaccineEcoSystem().getRootNetwork();
                countryNetwork = vaccineEcoSystem.getRootNetwork().findCountryNetwork(node.toString());
                int i = countryNetwork.getAllDistributorEnterprise().getEnterpriseList().size();
                if(i==0)
                {
                    addDistributorEnterprise();
                }
                else
                {
                    JOptionPane.showMessageDialog(null,"There is already one National Distributor present for this Country:");
                    return;
                }       
            }
        }
        else if(node==null)
        {
            JOptionPane.showMessageDialog(null,"Please select a network to configure" ,"SELECT",JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnAddDistributorActionPerformed

    
    private boolean checkForUniqueEnterpriseName(String name)
    {
        for(Network network: vaccineEcoSystem.getAllNetwork())
        {
            for(Enterprise enterprise: network.getAllCDCEnterprise().getEnterpriseList())
            {
                CDCEnterprise cdcEnterprise= (CDCEnterprise)enterprise;
                if(cdcEnterprise.getOrganizationName().equalsIgnoreCase(name))
                {
                    return false;
                }
            }
            for(Enterprise enterprise: network.getAllDistributorEnterprise().getEnterpriseList())
            {
                DistributorEnterprise distributorEnterprise = (DistributorEnterprise)enterprise;
                if(distributorEnterprise.getOrganizationName().equalsIgnoreCase(name))
                {
                    return false;
                }
            }
            for(Enterprise enterprise: network.getAllMedicalEnterprise().getEnterpriseList())
            {
                MedicalEnterprise medicalEnterprise = (MedicalEnterprise)enterprise;
                if(medicalEnterprise.getOrganizationName().equalsIgnoreCase(name))
                {
                    return false;
                }
            }
            for(Enterprise enterprise: network.getAllDPHEnterprise().getEnterpriseList())
            {
                DPHEnterprise dphEnterprise = (DPHEnterprise)enterprise;
                if(dphEnterprise.getOrganizationName().equalsIgnoreCase(name))
                {
                    return false;
                }
            }
        }
        return true;
    }
    
    
    private void addDistributorEnterprise()
    {
       DefaultMutableTreeNode node= (DefaultMutableTreeNode)jTreeEcoSystem.getLastSelectedPathComponent();
       if(node!=null)
       {  
           if(Validation.validateTextFieldsForNonEmpty(txtDistributorEnterpriseName))
           {
           //Globe Selected
               if(checkForUniqueEnterpriseName(txtDistributorEnterpriseName.getText().trim()))
               {
                        if(node.getLevel()==0)
                        {
                            Network rootNetwork = vaccineEcoSystem.getRootNetwork();
                            rootNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.DistributorEnterprise, txtDistributorEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtDistributorEnterpriseName.getText().toUpperCase()+" is added successfully added as World wide serving Distributor Enterprise","World wide Distributor Enterprise<-->"+txtDistributorEnterpriseName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                        }
                        //Country Selected
                        else if(node.getLevel()==1)
                        {
                            Network countryNetwork = vaccineEcoSystem.getRootNetwork().findCountryNetwork(node.toString());
                            if(countryNetwork!=null)
                            {
                            countryNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.DistributorEnterprise, txtDistributorEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtDistributorEnterpriseName.getText().toUpperCase()+" is added successfully added as country wide serving National Enterprise in "+node.toString(),node.toString()+"<-->"+txtDistributorEnterpriseName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                            
                        }
                        
                        //State Selected
                        else if(node.getLevel()==2)
                        {
                            Network stateNetwork = vaccineEcoSystem.getRootNetwork().findStateNetwork(node.getParent().toString(), node.toString());
                            if(stateNetwork!=null)
                            {
                            stateNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.DPHEnterprise, txtEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtEnterpriseName.getText().toUpperCase()+" is added successfully addad as state wide serving Enterprise in "+node.toString(),node.toString()+"<-->"+txtEnterpriseName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
           
                        //City Selected
                        else if(node.getLevel()==3)
                        {
                            Network cityNetwork = vaccineEcoSystem.getRootNetwork().findCityNetwork(node.getParent().getParent().toString(), node.getParent().toString(), node.toString());
                            if(cityNetwork!=null)
                            {
                            cityNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.MedicalEnterprise, txtEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtEnterpriseName.getText().toUpperCase()+" is added successfully addad as city wide serving Enterprise in "+node.toString(),node.toString()+"<-->"+txtEnterpriseName.getText().toUpperCase(),JOptionPane.INFORMATION_MESSAGE );

                            }
                        }
                          
                         clearFieldsAfterEnterpriseConfiguration();
               }
               else
               {
                   JOptionPane.showMessageDialog(null,"The Enterprise already exists in the system","SORRY",JOptionPane.ERROR_MESSAGE);
                   txtEnterpriseName.setText("");
                   return;
               }
            }
            else
            {
               JOptionPane.showMessageDialog(null, "Please enter valid input ","Input Missing",JOptionPane.ERROR_MESSAGE);
               return;
            }
       }
       else
       {
           JOptionPane.showMessageDialog(null,"Please select a network to configure","SELECT",JOptionPane.ERROR_MESSAGE);
           return;
       }
       populateTree();
        
        
    }
    

    private void addEnterprise()
    {
       DefaultMutableTreeNode node= (DefaultMutableTreeNode)jTreeEcoSystem.getLastSelectedPathComponent();
       if(node!=null)
       {
          
           if(Validation.validateTextFieldsForNonEmpty(txtEnterpriseName))
           {
           //Globe Selected
               if(checkForUniqueEnterpriseName(txtEnterpriseName.getText().trim()))
               {
                        if(node.getLevel()==0)
                        {
                            Network rootNetwork = vaccineEcoSystem.getRootNetwork();
                            rootNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.CDCEnterprise, txtEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtEnterpriseName.getText().toUpperCase()+" is added successfully addad as World wide serving Enterprise","World wide Enterprise<-->"+txtEnterpriseName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                        }
                        //Country Selected
                        else if(node.getLevel()==1)
                        {
                            Network countryNetwork = vaccineEcoSystem.getRootNetwork().findCountryNetwork(node.toString());
                            if(countryNetwork!=null)
                            {
                            countryNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.CDCEnterprise, txtEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtEnterpriseName.getText().toUpperCase()+" is added successfully added as country wide serving Enterprise in "+node.toString(),node.toString()+"<-->"+txtEnterpriseName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                            
                        }
           
                        //State Selected
                        else if(node.getLevel()==2)
                        {
                            Network stateNetwork = vaccineEcoSystem.getRootNetwork().findStateNetwork(node.getParent().toString(), node.toString());
                            if(stateNetwork!=null)
                            {
                            stateNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.DPHEnterprise, txtEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtEnterpriseName.getText().toUpperCase()+" is added successfully addad as state wide serving Enterprise in "+node.toString(),node.toString()+"<-->"+txtEnterpriseName.getText().toUpperCase(), JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
           
           //City Selected
                        else if(node.getLevel()==3)
                        {
                            Network cityNetwork = vaccineEcoSystem.getRootNetwork().findCityNetwork(node.getParent().getParent().toString(), node.getParent().toString(), node.toString());
                            if(cityNetwork!=null)
                            {
                            cityNetwork.getEnterpriseDirectory().createEnterprise(Enterprise.EnterpriseType.MedicalEnterprise, txtEnterpriseName.getText());
                            JOptionPane.showMessageDialog(null,"The Enterprise "+txtEnterpriseName.getText().toUpperCase()+" is added successfully addad as city wide serving Enterprise in "+node.toString(),node.toString()+"<-->"+txtEnterpriseName.getText().toUpperCase(),JOptionPane.INFORMATION_MESSAGE );

                            }
                        }
                         clearFieldsAfterEnterpriseConfiguration();
               }
               else
               {
                   JOptionPane.showMessageDialog(null,"The Enterprise already exists in the system","SORRY",JOptionPane.ERROR_MESSAGE);
                   txtEnterpriseName.setText("");
                   return;
               }
        }
         else
           {
               JOptionPane.showMessageDialog(null, "Please enter valid input ","Input Missing",JOptionPane.ERROR_MESSAGE);
               return;
           }
       }
       else
       {
           JOptionPane.showMessageDialog(null,"Please select a network to configure","SELECT",JOptionPane.ERROR_MESSAGE);
           return;
       }
       populateTree();
    }
    
    
    private void clearFormFieldsAfterGrowNetwork()
    {
        txtNetworkName.setText("");
    }
    
    private void clearFieldsAfterEnterpriseConfiguration()
    {
        txtEnterpriseName.setText("");
        txtDistributorEnterpriseName.setText("");
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDistributor;
    private javax.swing.JButton btnAddEnterprise;
    private javax.swing.JButton btnAddNetwork;
    private javax.swing.JButton btnSelectAndConfigure;
    private javax.swing.JLayeredPane jLPAddDistributorEnterprise;
    private javax.swing.JLayeredPane jLPAddEnterprise;
    private javax.swing.JLayeredPane jLPConfigureEnterprise;
    private javax.swing.JLayeredPane jLPGrowNetwork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTree jTreeEcoSystem;
    private javax.swing.JLabel lblAdd;
    private javax.swing.JLabel lblAddDistributorEnterprise;
    private javax.swing.JLabel lblAddEnterprise;
    private javax.swing.JLabel lblConfigureEnterprises;
    private javax.swing.JLabel lblSystemAmdinistrator;
    private javax.swing.JTable tblEnterprises;
    private javax.swing.JTextField txtDistributorEnterpriseName;
    private javax.swing.JTextField txtEnterpriseName;
    private javax.swing.JTextField txtNetworkName;
    // End of variables declaration//GEN-END:variables
}
