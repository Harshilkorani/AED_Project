/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import business.Business;
import business.DB4OUtil.DB4OUtil;
import business.enterprise.CDCEnterprise;
import business.enterprise.DPHEnterprise;
import business.enterprise.DistributorEnterprise;
import business.enterprise.Enterprise;
import static business.enterprise.Enterprise.EnterpriseType.CDCEnterprise;
import business.enterprise.MedicalEnterprise;
import business.network.Network;
import business.organization.Organization;
import static business.organization.Organization.OrganizationType.SitesManagement;
import business.organization.medicalenterpriseOrganizations.ProviderManagementOrganization;
import business.organization.medicalenterpriseOrganizations.SitesManagementOrganization;
import business.organization.useraccount.UserAccount;
import business.organization.useraccount.UserAccountDirectory;
import business.role.Role;
import business.site.Site;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

/**
 *
 * @author Harshil
 */

    

public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    
    private Business business;
    private DB4OUtil db = new DB4OUtil();
    
    public MainJFrame() {
        
        business = db.retrieveSystem();
        initComponents(); 
        populateUserComboBox();
        
    }
    
    
    
    private void populateUserComboBox()
    {
        
        cmbUser.removeAllItems();
        cmbUser.addItem("System Administrator");
        cmbUser.addItem("CDC Enterprise Admin");
        cmbUser.addItem("DPH Enterprise Admin");
        cmbUser.addItem("Medical Enterprise Admin");
        cmbUser.addItem("Distributor Enterprise Admin");   
        cmbUser.addItem("Provider Role");
        cmbUser.addItem("Hospital Admin Role");
        cmbUser.addItem("Pharmacy Admin Role");
        cmbUser.addItem("Clinic Admin Role");
        cmbUser.addItem("Site Configurator Role");
              
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content  of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftJPanel = new javax.swing.JPanel();
        btnLogout = new javax.swing.JButton();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        cmbUser = new javax.swing.JComboBox();
        userProcessContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(200);

        leftJPanel.setBackground(new java.awt.Color(153, 153, 153));

        btnLogout.setBackground(new java.awt.Color(102, 102, 255));
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblUsername.setText("                   Username");

        lblPassword.setText("                   Password");

        btnLogin.setBackground(new java.awt.Color(102, 102, 255));
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        cmbUser.setBackground(new java.awt.Color(102, 102, 255));
        cmbUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftJPanelLayout = new javax.swing.GroupLayout(leftJPanel);
        leftJPanel.setLayout(leftJPanelLayout);
        leftJPanelLayout.setHorizontalGroup(
            leftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftJPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogout))
                    .addGroup(leftJPanelLayout.createSequentialGroup()
                        .addGroup(leftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtUsername)
                                .addComponent(lblPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPassword))
                            .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(leftJPanelLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(btnLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        leftJPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbUser, lblUsername, txtPassword, txtUsername});

        leftJPanelLayout.setVerticalGroup(
            leftJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftJPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnLogout)
                .addGap(23, 23, 23)
                .addComponent(lblUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(cmbUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnLogin)
                .addContainerGap(224, Short.MAX_VALUE))
        );

        leftJPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbUser, lblUsername, txtPassword, txtUsername});

        jSplitPane1.setLeftComponent(leftJPanel);

        userProcessContainer.setBackground(new java.awt.Color(153, 153, 153));
        userProcessContainer.setLayout(new java.awt.CardLayout());
        jSplitPane1.setRightComponent(userProcessContainer);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbUserActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        
        String username = txtUsername.getText();
        char[] passwordCharArray = txtPassword.getText().toCharArray();
        String password = String.valueOf(passwordCharArray);
        String selectedValue = cmbUser.getSelectedItem().toString();
        
        UserAccount userAccount = null;
        
        if(selectedValue.equalsIgnoreCase("System Administrator"))
        {
            authenticateForSystemAdmin(username,password);
        }
        else if (selectedValue.equalsIgnoreCase("Medical Enterprise Admin"))
        {
            authenticateForMedicalEnterpriseAdmin(username, password);
        }
        else if(selectedValue.equalsIgnoreCase("Site Configurator Role"))
        {
            authenticateForSitesConfigurator(username, password);
        }
        else if (selectedValue.equalsIgnoreCase("Hospital Admin Role"))
        {
           authenticateForSiteHospitalAdmin(username,password);
        }
        else if (selectedValue.equalsIgnoreCase("Clinic Admin Role"))
        {
            authenticateForSiteClinicAdmin(username,password);
        }
        else if(selectedValue.equalsIgnoreCase("Pharmacy Admin Role"))
        {
            authenticateForSitePharmacyAdmin(username,password);
        }
        else if (selectedValue.equalsIgnoreCase("Provider Role"))
        {
           authenticateForProvider(username, password);
        }
        else if (selectedValue.equalsIgnoreCase("CDC Enterprise Admin"))
        {
           authenticateForCDCEnterpriseAdmin(username,password);
        }
        else if (selectedValue.equalsIgnoreCase("DPH Enterprise Admin"))
        {
           authenticateForDPHEnterpriseAdmin(username,password);
        }
        else if (selectedValue.equalsIgnoreCase("Distributor Enterprise Admin"))
        {
            authenticateForDistributorEnterpriseAdmin(username,password);
        }
        
    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        
        userProcessContainer.removeAll();
        txtUsername.setText("");
        txtPassword.setText("");
        db.storeSystem(business);
        
    }//GEN-LAST:event_btnLogoutActionPerformed

    
    private void authenticateForSystemAdmin(String userName, String password)
    {    
        UserAccountDirectory userAccountDirectory = business.getVaccineEcoSystem().getUserAccountDirectory();
        UserAccount userAccount = userAccountDirectory.authenticateUserAccount(userName, password);
        if(userAccount==null)
        {
            JOptionPane.showMessageDialog(null, "Sorry, you are not authenticated as System Administrator","AUTHENTICATION FAILURE",JOptionPane.ERROR_MESSAGE);
        }
        else if(userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.SystemAdmin.getValue()))
        {
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("System Admin Work Area", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,null,null,null,null,null,business));
            layout.next(userProcessContainer);
        }
    }
    
    private void authenticateForCDCEnterpriseAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof CDCEnterprise)
               {
                        UserAccount userAccount=enterprise.getUserAccountDirectory().authenticateUserAccount(userName, password);
                        if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.CDCEnterpriseAdmin.getValue()))    
                        {
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            userProcessContainer.add("CDC Enterprise Admin", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, null, null, business));
                            layout.next(userProcessContainer);
                            break outerNetwork;
                        }
                        
               }
              
           }
       }
    } 
    
    
    private void authenticateForDistributorEnterpriseAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof DistributorEnterprise)
               {
                        UserAccount userAccount=enterprise.getUserAccountDirectory().authenticateUserAccount(userName, password);
                        if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.DistributorEnterpriseAdmin.getValue()))    
                        {
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            userProcessContainer.add("Distributor Enterprise Admin", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, null, null, business));
                            layout.next(userProcessContainer);
                            break outerNetwork;
                        }
               }
           }
       }
    } 
    
    
    
    private void authenticateForDPHEnterpriseAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof DPHEnterprise)
               {
                        UserAccount userAccount=enterprise.getUserAccountDirectory().authenticateUserAccount(userName, password);
                        if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.DPHEnterpriseAdmin.getValue()))    
                        {
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            userProcessContainer.add("DPH Enterprise Admin", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, null, null, business));
                            layout.next(userProcessContainer);
                            break outerNetwork;
                        }
               }
           }
       }
    } 
    

    private void authenticateForSiteHospitalAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof MedicalEnterprise)
               {
                   MedicalEnterprise medicalEnterprise=(MedicalEnterprise)enterprise;
                                
                        for(Site site:medicalEnterprise.getSiteDirectory().getSiteList())
                        {
                       
                       UserAccount userAccount = site.getUserAccountDirectory().authenticateUserAccount(userName, password);
                       if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.HospitalAdminRole.getValue())  )  
                       {
                          CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                          userProcessContainer.add("Hospital Admin Role", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, site, null, business));
                          layout.next(userProcessContainer);
                          break outerNetwork;
                       }
                   }
               }
           }
       }
    }
  
    private void authenticateForSiteClinicAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof MedicalEnterprise)
               {
                   MedicalEnterprise medicalEnterprise=(MedicalEnterprise)enterprise;
               
                   for(Site site:medicalEnterprise.getSiteDirectory().getSiteList())
                   {
                       UserAccount userAccount = site.getUserAccountDirectory().authenticateUserAccount(userName, password);
                       if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.ClinicAdminRole.getValue())  )  
                       {
                          CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                          userProcessContainer.add("Clinic Admin Role", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, site, null, business));
                          layout.next(userProcessContainer);
                          break outerNetwork;
                       }
                   }
               }
           }
       }
    }
    
    
    
    private void authenticateForSitePharmacyAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof MedicalEnterprise)
               {
                   MedicalEnterprise medicalEnterprise=(MedicalEnterprise)enterprise;
               
                   for(Site site:medicalEnterprise.getSiteDirectory().getSiteList())
                   {
                       UserAccount userAccount = site.getUserAccountDirectory().authenticateUserAccount(userName, password);
                       if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.PharmacyAdminRole.getValue())  )  
                       {
                          CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                          userProcessContainer.add("Pharmacy Admin Role", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, site, null, business));
                          layout.next(userProcessContainer);
                          break outerNetwork;
                       }
                   }
               }
           }
       }
    }
    
    
    
    
    
private void authenticateForMedicalEnterpriseAdmin(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof MedicalEnterprise)
               {
                        UserAccount userAccount=enterprise.getUserAccountDirectory().authenticateUserAccount(userName, password);
                        if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.MedicalEnterpriseAdmin.getValue()))    
                        {
                            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                            userProcessContainer.add("Medical Enterprise Admin", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, null, null, null, business));
                            layout.next(userProcessContainer);
                            break outerNetwork;
                        }
               }
           }
       }
    }    



private void authenticateForSitesConfigurator(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof MedicalEnterprise)
               {
                   for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                   {
                       if(organization instanceof SitesManagementOrganization)
                       {
                                UserAccount userAccount=organization.getUserAccountDirectory().authenticateUserAccount(userName, password);
                                if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.SiteConfiguratorRole.getValue()))    
                                {
                                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                                    userProcessContainer.add("Medical Enterprise - Sites Configurator", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, organization, null, null, business));
                                    layout.next(userProcessContainer);
                                    break outerNetwork;
                                }
                       }
                   }
               }
           }
       }
    }


private void authenticateForProvider(String userName, String password)
    {
        outerNetwork: for(Network network:business.getVaccineEcoSystem().getAllNetwork())
       {
           for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterpriseList())
           {
               if(enterprise instanceof MedicalEnterprise)
               {
                   for(Organization organization:enterprise.getOrganizationDirectory().getOrganizationList())
                   {
                       if(organization instanceof ProviderManagementOrganization)
                       {
                                UserAccount userAccount=organization.getUserAccountDirectory().authenticateUserAccount(userName, password);
                                if(userAccount!=null && userAccount.getRole().getRoleType().equalsIgnoreCase(Role.RoleType.ProviderRole.getValue()))    
                                {
                                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                                    userProcessContainer.add("Medical Enterprise - Provider", userAccount.getRole().createWorkArea(userProcessContainer, userAccount,network, enterprise, organization, null, null, business));
                                    layout.next(userProcessContainer);
                                    break outerNetwork;
                                }
                       }
                   }
               }
           }
       }
    }
       
    
    /**
     * @param args the command line arguments 
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JComboBox cmbUser;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPanel leftJPanel;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JPanel userProcessContainer;
    // End of variables declaration//GEN-END:variables
}
